- name: Bring up L3 links and BGP neighbors (EOS)
  hosts: eos
  gather_facts: no
  collections: [arista.eos]

  vars:
    ports_all: "{{ interfaces[inventory_hostname] }}"
    eth_ports: "{{ ports_all | selectattr('name','search','^Ethernet') | list }}"
    b: "{{ bgp[inventory_hostname] }}"

  tasks:
    # 0) 开启全局三层转发（BGP/OSPF 等都需要）
    - name: Enable global unicast routing
      arista.eos.eos_config:
        lines: [ "ip routing" ]
        save_when: modified

    # 1) 物理以太口切换到三层 + 描述 + 启用（结构化模块）
    - name: Ensure Ethernet ports are layer3 & enabled (structured)
      loop: "{{ eth_ports }}"
      loop_control: { loop_var: p }
      arista.eos.eos_interfaces:
        config:
          - name: "{{ p.name }}"
            mode: layer3              # ✅ 用 layer3
            description: "{{ p.desc | default(omit) }}"
            enabled: true
        state: merged

    # 2) 所有接口（含 Loopback）配置 IPv4 地址（结构化模块）
    - name: Configure IPv4 addresses on all ports (structured)
      loop: "{{ ports_all }}"
      loop_control: { loop_var: p }
      arista.eos.eos_l3_interfaces:
        config:
          - name: "{{ p.name }}"
            ipv4:
              - address: "{{ p.ip }}"
        state: merged

    # 3) （仅 R1）加 Null0 静态，便于 network 匹配
    - name: (R1 only) Install Null0 routes for aggregates
      when: b.static_nulls is defined
      loop: "{{ b.static_nulls }}"
      loop_control: { loop_var: n }
      arista.eos.eos_config:
        lines: [ "ip route {{ n }} Null0" ]
        save_when: modified

    # 4) 确保 BGP 进程存在
    - name: Ensure BGP base exists
      arista.eos.eos_config:
        lines: [ "router bgp {{ b.asn }}" ]
        save_when: modified

    # 5) 配置 BGP 邻居（merge：只增改不删）
    - name: Configure BGP neighbors
      loop: "{{ b.neighbors }}"
      loop_control: { loop_var: nb }
      arista.eos.eos_config:
        parents: [ "router bgp {{ b.asn }}" ]
        lines:
          - "neighbor {{ nb.ip }} remote-as {{ nb.remote_as }}"
          - "{% if nb.nh_self | default(false) %}neighbor {{ nb.ip }} next-hop-self{% endif %}"
        save_when: modified

    # 6) 宣告前缀
    - name: Advertise networks
      when: b.networks is defined
      loop: "{{ b.networks }}"
      loop_control: { loop_var: nw }
      arista.eos.eos_config:
        parents: [ "router bgp {{ b.asn }}" ]
        lines: [ "network {{ nw }}" ]
        save_when: modified

    # === 路线A：清理未声明的多余邻居（差集删除）===
    - name: Get current BGP section
      arista.eos.eos_command:
        commands: [ "show running-config section router bgp {{ b.asn }}" ]
      register: bgp_run

    - name: Build neighbor sets (intended vs current)
      vars:
        intended: "{{ b.neighbors | map(attribute='ip') | list }}"
        current: >-
          {{ (bgp_run.stdout[0] | default(''))
             | regex_findall('neighbor\\s+([0-9.]+)')
             | unique | list }}
      set_fact:
        bgp_neighbors_intended: "{{ intended }}"
        bgp_neighbors_current: "{{ current }}"
        bgp_neighbors_to_remove: "{{ current | difference(intended) }}"

    - name: Remove extra neighbors not in vars (idempotent cleanup)
      when: bgp_neighbors_to_remove | length > 0
      loop: "{{ bgp_neighbors_to_remove }}"
      loop_control: { loop_var: n_ip }
      arista.eos.eos_config:
        parents: [ "router bgp {{ b.asn }}" ]
        lines: [ "no neighbor {{ n_ip }}" ]
        save_when: modified

    # === 验证：dry-run 只提示；真部署才断言 ===
    - name: Show BGP summary
      arista.eos.eos_command:
        commands: [ "show ip bgp summary" ]
      register: bgp_sum

    - name: Compute intended and established counts
      set_fact:
        cnt_intended: "{{ (b.neighbors | length) | int }}"
        # 统计 'Estab' 出现次数；不同平台/版本更稳
        cnt_estab: "{{ (bgp_sum.stdout[0] | regex_findall('\\bEstab\\b') | length) | int }}"

    - name: DRY-RUN note
      when: ansible_check_mode
      debug:
        msg: "DRY-RUN: would expect {{ cnt_intended }} Established; now {{ cnt_estab }} (not enforced in --check)."

    - name: Assert neighbors established as intended
      when: not ansible_check_mode
      assert:
        that:
          - cnt_estab == cnt_intended
        success_msg: "BGP neighbors Established = {{ cnt_estab }}/{{ cnt_intended }} ✅"
        fail_msg: "BGP neighbors Established {{ cnt_estab }} != expected {{ cnt_intended }} ❌"
