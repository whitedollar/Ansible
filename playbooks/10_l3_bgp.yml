- name: Bring up L3 links and BGP neighbors (EOS)
  hosts: eos
  gather_facts: no
  collections: [arista.eos]

  vars:
    ports_all: "{{ interfaces[inventory_hostname] }}"
    eth_ports: "{{ ports_all | selectattr('name','search','^Ethernet') | list }}"
    b: "{{ bgp[inventory_hostname] }}"

  tasks:
    # 0) 开启全局三层转发
    - name: Enable global unicast routing
      arista.eos.eos_config:
        lines: [ "ip routing" ]
        save_when: modified

    # 1) 以太口切 L3 + 描述 + 启用
    - name: Ensure Ethernet ports are layer3 & enabled (structured)
      loop: "{{ eth_ports }}"
      loop_control: { loop_var: p }
      arista.eos.eos_interfaces:
        config:
          - name: "{{ p.name }}"
            mode: layer3
            description: "{{ p.desc | default(omit) }}"
            enabled: true
        state: merged

    # 2) 所有接口（含 Loopback）配置 IPv4
    - name: Configure IPv4 addresses on all ports (structured)
      loop: "{{ ports_all }}"
      loop_control: { loop_var: p }
      arista.eos.eos_l3_interfaces:
        config:
          - name: "{{ p.name }}"
            ipv4:
              - address: "{{ p.ip }}"
        state: merged

    # 3) （R1）安装 Null0 路由便于 network 匹配
    - name: (R1 only) Install Null0 routes for aggregates
      when: b.static_nulls is defined
      loop: "{{ b.static_nulls }}"
      loop_control: { loop_var: n }
      arista.eos.eos_config:
        lines: [ "ip route {{ n }} Null0" ]
        save_when: modified

    # 4) 确保 BGP 进程存在
    - name: Ensure BGP base exists
      arista.eos.eos_config:
        lines: [ "router bgp {{ b.asn }}" ]
        save_when: modified

    # 5) 配置 BGP 邻居（合并：只增改不删）
    - name: Configure BGP neighbors (merge)
      loop: "{{ b.neighbors }}"
      loop_control: { loop_var: nb }
      arista.eos.eos_config:
        parents: [ "router bgp {{ b.asn }}" ]
        lines:
          - "neighbor {{ nb.ip }} remote-as {{ nb.remote_as }}"
          - "{% if nb.nh_self | default(false) %}neighbor {{ nb.ip }} next-hop-self{% endif %}"
        save_when: modified

    # 6) 宣告前缀
    - name: Advertise networks
      when: b.networks is defined
      loop: "{{ b.networks }}"
      loop_control: { loop_var: nw }
      arista.eos.eos_config:
        parents: [ "router bgp {{ b.asn }}" ]
        lines: [ "network {{ nw }}" ]
        save_when: modified

    # === 路线A：基于 JSON 的邻居清理（不使用正则） ===

    # 7) 取 BGP summary 的 JSON
    - name: Get BGP summary (JSON)
      arista.eos.eos_command:
        commands: [ "show ip bgp summary | json" ]
      register: bgp_json

    # 8) 规范化 JSON（stdout[0] 可能已是 dict）
    - name: Normalize BGP JSON to dict
      set_fact:
        bgp_struct: >-
          {{ bgp_json.stdout[0] if (bgp_json.stdout[0] is mapping)
             else (bgp_json.stdout[0] | from_json) }}

    # 9) 解析当前/期望邻居并求差集
    - name: Build neighbor sets from JSON
      vars:
        peers_dict: "{{ bgp_struct.get('vrfs', {}).get('default', {}).get('peers', {}) }}"
        current_nb_list: "{{ peers_dict.keys() | list }}"
        intended_nb_list: "{{ b.neighbors | map(attribute='ip') | list }}"
      set_fact:
        bgp_neighbors_current: "{{ current_nb_list }}"
        bgp_neighbors_intended: "{{ intended_nb_list }}"
        bgp_neighbors_to_remove: "{{ current_nb_list | difference(intended_nb_list) }}"

    # 10) 调试输出（便于核对）
    - name: Debug neighbor sets (current / intended / to_remove)
      debug:
        msg:
          current:   "{{ bgp_neighbors_current }}"
          intended:  "{{ bgp_neighbors_intended }}"
          to_remove: "{{ bgp_neighbors_to_remove }}"

    # 11) 删除未声明的多余邻居（幂等收敛）
    - name: Remove extra neighbors not in vars (idempotent cleanup)
      when: bgp_neighbors_to_remove | length > 0
      loop: "{{ bgp_neighbors_to_remove }}"
      loop_control: { loop_var: n_ip }
      arista.eos.eos_config:
        parents: [ "router bgp {{ b.asn }}" ]
        lines: [ "no neighbor {{ n_ip }}" ]
        save_when: modified

    # === 验证：dry-run 只提示；部署时断言 ===
    - name: Show BGP summary (for validation)
      arista.eos.eos_command:
        commands: [ "show ip bgp summary" ]
      register: bgp_sum

    - name: Compute intended and established counts
      set_fact:
        cnt_intended: "{{ (b.neighbors | length) | int }}"
        cnt_estab: "{{ (bgp_sum.stdout[0] | regex_findall('\\bEstab\\b') | length) | int }}"

    - name: DRY-RUN note
      when: ansible_check_mode
      debug:
        msg: "DRY-RUN: would expect {{ cnt_intended }} Established; now {{ cnt_estab }} (not enforced in --check)."

    - name: Assert neighbors established as intended
      when: not ansible_check_mode
      assert:
        that:
          - cnt_estab == cnt_intended
        success_msg: "BGP neighbors Established = {{ cnt_estab }}/{{ cnt_intended }} ✅"
        fail_msg: "BGP neighbors Established {{ cnt_estab }} != expected {{ cnt_intended }} ❌"
